// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package driver_service

import (
	context "context"
	messages "github.com/graphql-editor/stucco_proto/go/messages"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DriverClient is the client API for Driver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DriverClient interface {
	Config(ctx context.Context, in *messages.ConfigRequest, opts ...grpc.CallOption) (*messages.ConfigResponse, error)
	FieldResolve(ctx context.Context, in *messages.FieldResolveRequest, opts ...grpc.CallOption) (*messages.FieldResolveResponse, error)
	InterfaceResolveType(ctx context.Context, in *messages.InterfaceResolveTypeRequest, opts ...grpc.CallOption) (*messages.InterfaceResolveTypeResponse, error)
	ScalarParse(ctx context.Context, in *messages.ScalarParseRequest, opts ...grpc.CallOption) (*messages.ScalarParseResponse, error)
	ScalarSerialize(ctx context.Context, in *messages.ScalarSerializeRequest, opts ...grpc.CallOption) (*messages.ScalarSerializeResponse, error)
	UnionResolveType(ctx context.Context, in *messages.UnionResolveTypeRequest, opts ...grpc.CallOption) (*messages.UnionResolveTypeResponse, error)
	SetSecrets(ctx context.Context, in *messages.SetSecretsRequest, opts ...grpc.CallOption) (*messages.SetSecretsResponse, error)
	Stream(ctx context.Context, in *messages.StreamRequest, opts ...grpc.CallOption) (Driver_StreamClient, error)
	Stdout(ctx context.Context, in *messages.ByteStreamRequest, opts ...grpc.CallOption) (Driver_StdoutClient, error)
	Stderr(ctx context.Context, in *messages.ByteStreamRequest, opts ...grpc.CallOption) (Driver_StderrClient, error)
	SubscriptionConnection(ctx context.Context, in *messages.SubscriptionConnectionRequest, opts ...grpc.CallOption) (*messages.SubscriptionConnectionResponse, error)
	SubscriptionListen(ctx context.Context, in *messages.SubscriptionListenRequest, opts ...grpc.CallOption) (Driver_SubscriptionListenClient, error)
}

type driverClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverClient(cc grpc.ClientConnInterface) DriverClient {
	return &driverClient{cc}
}

func (c *driverClient) Config(ctx context.Context, in *messages.ConfigRequest, opts ...grpc.CallOption) (*messages.ConfigResponse, error) {
	out := new(messages.ConfigResponse)
	err := c.cc.Invoke(ctx, "/stucco.driver_service.Driver/Config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) FieldResolve(ctx context.Context, in *messages.FieldResolveRequest, opts ...grpc.CallOption) (*messages.FieldResolveResponse, error) {
	out := new(messages.FieldResolveResponse)
	err := c.cc.Invoke(ctx, "/stucco.driver_service.Driver/FieldResolve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) InterfaceResolveType(ctx context.Context, in *messages.InterfaceResolveTypeRequest, opts ...grpc.CallOption) (*messages.InterfaceResolveTypeResponse, error) {
	out := new(messages.InterfaceResolveTypeResponse)
	err := c.cc.Invoke(ctx, "/stucco.driver_service.Driver/InterfaceResolveType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) ScalarParse(ctx context.Context, in *messages.ScalarParseRequest, opts ...grpc.CallOption) (*messages.ScalarParseResponse, error) {
	out := new(messages.ScalarParseResponse)
	err := c.cc.Invoke(ctx, "/stucco.driver_service.Driver/ScalarParse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) ScalarSerialize(ctx context.Context, in *messages.ScalarSerializeRequest, opts ...grpc.CallOption) (*messages.ScalarSerializeResponse, error) {
	out := new(messages.ScalarSerializeResponse)
	err := c.cc.Invoke(ctx, "/stucco.driver_service.Driver/ScalarSerialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) UnionResolveType(ctx context.Context, in *messages.UnionResolveTypeRequest, opts ...grpc.CallOption) (*messages.UnionResolveTypeResponse, error) {
	out := new(messages.UnionResolveTypeResponse)
	err := c.cc.Invoke(ctx, "/stucco.driver_service.Driver/UnionResolveType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) SetSecrets(ctx context.Context, in *messages.SetSecretsRequest, opts ...grpc.CallOption) (*messages.SetSecretsResponse, error) {
	out := new(messages.SetSecretsResponse)
	err := c.cc.Invoke(ctx, "/stucco.driver_service.Driver/SetSecrets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Stream(ctx context.Context, in *messages.StreamRequest, opts ...grpc.CallOption) (Driver_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Driver_ServiceDesc.Streams[0], "/stucco.driver_service.Driver/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &driverStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Driver_StreamClient interface {
	Recv() (*messages.StreamMessage, error)
	grpc.ClientStream
}

type driverStreamClient struct {
	grpc.ClientStream
}

func (x *driverStreamClient) Recv() (*messages.StreamMessage, error) {
	m := new(messages.StreamMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverClient) Stdout(ctx context.Context, in *messages.ByteStreamRequest, opts ...grpc.CallOption) (Driver_StdoutClient, error) {
	stream, err := c.cc.NewStream(ctx, &Driver_ServiceDesc.Streams[1], "/stucco.driver_service.Driver/Stdout", opts...)
	if err != nil {
		return nil, err
	}
	x := &driverStdoutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Driver_StdoutClient interface {
	Recv() (*messages.ByteStream, error)
	grpc.ClientStream
}

type driverStdoutClient struct {
	grpc.ClientStream
}

func (x *driverStdoutClient) Recv() (*messages.ByteStream, error) {
	m := new(messages.ByteStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverClient) Stderr(ctx context.Context, in *messages.ByteStreamRequest, opts ...grpc.CallOption) (Driver_StderrClient, error) {
	stream, err := c.cc.NewStream(ctx, &Driver_ServiceDesc.Streams[2], "/stucco.driver_service.Driver/Stderr", opts...)
	if err != nil {
		return nil, err
	}
	x := &driverStderrClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Driver_StderrClient interface {
	Recv() (*messages.ByteStream, error)
	grpc.ClientStream
}

type driverStderrClient struct {
	grpc.ClientStream
}

func (x *driverStderrClient) Recv() (*messages.ByteStream, error) {
	m := new(messages.ByteStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *driverClient) SubscriptionConnection(ctx context.Context, in *messages.SubscriptionConnectionRequest, opts ...grpc.CallOption) (*messages.SubscriptionConnectionResponse, error) {
	out := new(messages.SubscriptionConnectionResponse)
	err := c.cc.Invoke(ctx, "/stucco.driver_service.Driver/SubscriptionConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) SubscriptionListen(ctx context.Context, in *messages.SubscriptionListenRequest, opts ...grpc.CallOption) (Driver_SubscriptionListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &Driver_ServiceDesc.Streams[3], "/stucco.driver_service.Driver/SubscriptionListen", opts...)
	if err != nil {
		return nil, err
	}
	x := &driverSubscriptionListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Driver_SubscriptionListenClient interface {
	Recv() (*messages.SubscriptionListenMessage, error)
	grpc.ClientStream
}

type driverSubscriptionListenClient struct {
	grpc.ClientStream
}

func (x *driverSubscriptionListenClient) Recv() (*messages.SubscriptionListenMessage, error) {
	m := new(messages.SubscriptionListenMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DriverServer is the server API for Driver service.
// All implementations must embed UnimplementedDriverServer
// for forward compatibility
type DriverServer interface {
	Config(context.Context, *messages.ConfigRequest) (*messages.ConfigResponse, error)
	FieldResolve(context.Context, *messages.FieldResolveRequest) (*messages.FieldResolveResponse, error)
	InterfaceResolveType(context.Context, *messages.InterfaceResolveTypeRequest) (*messages.InterfaceResolveTypeResponse, error)
	ScalarParse(context.Context, *messages.ScalarParseRequest) (*messages.ScalarParseResponse, error)
	ScalarSerialize(context.Context, *messages.ScalarSerializeRequest) (*messages.ScalarSerializeResponse, error)
	UnionResolveType(context.Context, *messages.UnionResolveTypeRequest) (*messages.UnionResolveTypeResponse, error)
	SetSecrets(context.Context, *messages.SetSecretsRequest) (*messages.SetSecretsResponse, error)
	Stream(*messages.StreamRequest, Driver_StreamServer) error
	Stdout(*messages.ByteStreamRequest, Driver_StdoutServer) error
	Stderr(*messages.ByteStreamRequest, Driver_StderrServer) error
	SubscriptionConnection(context.Context, *messages.SubscriptionConnectionRequest) (*messages.SubscriptionConnectionResponse, error)
	SubscriptionListen(*messages.SubscriptionListenRequest, Driver_SubscriptionListenServer) error
	mustEmbedUnimplementedDriverServer()
}

// UnimplementedDriverServer must be embedded to have forward compatible implementations.
type UnimplementedDriverServer struct {
}

func (UnimplementedDriverServer) Config(context.Context, *messages.ConfigRequest) (*messages.ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (UnimplementedDriverServer) FieldResolve(context.Context, *messages.FieldResolveRequest) (*messages.FieldResolveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FieldResolve not implemented")
}
func (UnimplementedDriverServer) InterfaceResolveType(context.Context, *messages.InterfaceResolveTypeRequest) (*messages.InterfaceResolveTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InterfaceResolveType not implemented")
}
func (UnimplementedDriverServer) ScalarParse(context.Context, *messages.ScalarParseRequest) (*messages.ScalarParseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScalarParse not implemented")
}
func (UnimplementedDriverServer) ScalarSerialize(context.Context, *messages.ScalarSerializeRequest) (*messages.ScalarSerializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScalarSerialize not implemented")
}
func (UnimplementedDriverServer) UnionResolveType(context.Context, *messages.UnionResolveTypeRequest) (*messages.UnionResolveTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnionResolveType not implemented")
}
func (UnimplementedDriverServer) SetSecrets(context.Context, *messages.SetSecretsRequest) (*messages.SetSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSecrets not implemented")
}
func (UnimplementedDriverServer) Stream(*messages.StreamRequest, Driver_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedDriverServer) Stdout(*messages.ByteStreamRequest, Driver_StdoutServer) error {
	return status.Errorf(codes.Unimplemented, "method Stdout not implemented")
}
func (UnimplementedDriverServer) Stderr(*messages.ByteStreamRequest, Driver_StderrServer) error {
	return status.Errorf(codes.Unimplemented, "method Stderr not implemented")
}
func (UnimplementedDriverServer) SubscriptionConnection(context.Context, *messages.SubscriptionConnectionRequest) (*messages.SubscriptionConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscriptionConnection not implemented")
}
func (UnimplementedDriverServer) SubscriptionListen(*messages.SubscriptionListenRequest, Driver_SubscriptionListenServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscriptionListen not implemented")
}
func (UnimplementedDriverServer) mustEmbedUnimplementedDriverServer() {}

// UnsafeDriverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriverServer will
// result in compilation errors.
type UnsafeDriverServer interface {
	mustEmbedUnimplementedDriverServer()
}

func RegisterDriverServer(s grpc.ServiceRegistrar, srv DriverServer) {
	s.RegisterService(&Driver_ServiceDesc, srv)
}

func _Driver_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stucco.driver_service.Driver/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Config(ctx, req.(*messages.ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_FieldResolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.FieldResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).FieldResolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stucco.driver_service.Driver/FieldResolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).FieldResolve(ctx, req.(*messages.FieldResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_InterfaceResolveType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.InterfaceResolveTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).InterfaceResolveType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stucco.driver_service.Driver/InterfaceResolveType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).InterfaceResolveType(ctx, req.(*messages.InterfaceResolveTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_ScalarParse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ScalarParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).ScalarParse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stucco.driver_service.Driver/ScalarParse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).ScalarParse(ctx, req.(*messages.ScalarParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_ScalarSerialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ScalarSerializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).ScalarSerialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stucco.driver_service.Driver/ScalarSerialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).ScalarSerialize(ctx, req.(*messages.ScalarSerializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_UnionResolveType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UnionResolveTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).UnionResolveType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stucco.driver_service.Driver/UnionResolveType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).UnionResolveType(ctx, req.(*messages.UnionResolveTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_SetSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.SetSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).SetSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stucco.driver_service.Driver/SetSecrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).SetSecrets(ctx, req.(*messages.SetSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(messages.StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DriverServer).Stream(m, &driverStreamServer{stream})
}

type Driver_StreamServer interface {
	Send(*messages.StreamMessage) error
	grpc.ServerStream
}

type driverStreamServer struct {
	grpc.ServerStream
}

func (x *driverStreamServer) Send(m *messages.StreamMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Driver_Stdout_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(messages.ByteStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DriverServer).Stdout(m, &driverStdoutServer{stream})
}

type Driver_StdoutServer interface {
	Send(*messages.ByteStream) error
	grpc.ServerStream
}

type driverStdoutServer struct {
	grpc.ServerStream
}

func (x *driverStdoutServer) Send(m *messages.ByteStream) error {
	return x.ServerStream.SendMsg(m)
}

func _Driver_Stderr_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(messages.ByteStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DriverServer).Stderr(m, &driverStderrServer{stream})
}

type Driver_StderrServer interface {
	Send(*messages.ByteStream) error
	grpc.ServerStream
}

type driverStderrServer struct {
	grpc.ServerStream
}

func (x *driverStderrServer) Send(m *messages.ByteStream) error {
	return x.ServerStream.SendMsg(m)
}

func _Driver_SubscriptionConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.SubscriptionConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).SubscriptionConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stucco.driver_service.Driver/SubscriptionConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).SubscriptionConnection(ctx, req.(*messages.SubscriptionConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_SubscriptionListen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(messages.SubscriptionListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DriverServer).SubscriptionListen(m, &driverSubscriptionListenServer{stream})
}

type Driver_SubscriptionListenServer interface {
	Send(*messages.SubscriptionListenMessage) error
	grpc.ServerStream
}

type driverSubscriptionListenServer struct {
	grpc.ServerStream
}

func (x *driverSubscriptionListenServer) Send(m *messages.SubscriptionListenMessage) error {
	return x.ServerStream.SendMsg(m)
}

// Driver_ServiceDesc is the grpc.ServiceDesc for Driver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Driver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stucco.driver_service.Driver",
	HandlerType: (*DriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Config",
			Handler:    _Driver_Config_Handler,
		},
		{
			MethodName: "FieldResolve",
			Handler:    _Driver_FieldResolve_Handler,
		},
		{
			MethodName: "InterfaceResolveType",
			Handler:    _Driver_InterfaceResolveType_Handler,
		},
		{
			MethodName: "ScalarParse",
			Handler:    _Driver_ScalarParse_Handler,
		},
		{
			MethodName: "ScalarSerialize",
			Handler:    _Driver_ScalarSerialize_Handler,
		},
		{
			MethodName: "UnionResolveType",
			Handler:    _Driver_UnionResolveType_Handler,
		},
		{
			MethodName: "SetSecrets",
			Handler:    _Driver_SetSecrets_Handler,
		},
		{
			MethodName: "SubscriptionConnection",
			Handler:    _Driver_SubscriptionConnection_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Driver_Stream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Stdout",
			Handler:       _Driver_Stdout_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Stderr",
			Handler:       _Driver_Stderr_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscriptionListen",
			Handler:       _Driver_SubscriptionListen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "driver_service/service.proto",
}
