// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: messages/messages.proto

package messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ObjectValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Props map[string]*Value `protobuf:"bytes,1,rep,name=props,proto3" json:"props,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ObjectValue) Reset() {
	*x = ObjectValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectValue) ProtoMessage() {}

func (x *ObjectValue) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectValue.ProtoReflect.Descriptor instead.
func (*ObjectValue) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{0}
}

func (x *ObjectValue) GetProps() map[string]*Value {
	if x != nil {
		return x.Props
	}
	return nil
}

type ArrayValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Value `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ArrayValue) Reset() {
	*x = ArrayValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrayValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayValue) ProtoMessage() {}

func (x *ArrayValue) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayValue.ProtoReflect.Descriptor instead.
func (*ArrayValue) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{1}
}

func (x *ArrayValue) GetItems() []*Value {
	if x != nil {
		return x.Items
	}
	return nil
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TestValue:
	//	*Value_I
	//	*Value_U
	//	*Value_F
	//	*Value_S
	//	*Value_B
	//	*Value_O
	//	*Value_A
	//	*Value_Any
	//	*Value_Variable
	//	*Value_Nil
	TestValue isValue_TestValue `protobuf_oneof:"test_value"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{2}
}

func (m *Value) GetTestValue() isValue_TestValue {
	if m != nil {
		return m.TestValue
	}
	return nil
}

func (x *Value) GetI() int64 {
	if x, ok := x.GetTestValue().(*Value_I); ok {
		return x.I
	}
	return 0
}

func (x *Value) GetU() uint64 {
	if x, ok := x.GetTestValue().(*Value_U); ok {
		return x.U
	}
	return 0
}

func (x *Value) GetF() float64 {
	if x, ok := x.GetTestValue().(*Value_F); ok {
		return x.F
	}
	return 0
}

func (x *Value) GetS() string {
	if x, ok := x.GetTestValue().(*Value_S); ok {
		return x.S
	}
	return ""
}

func (x *Value) GetB() bool {
	if x, ok := x.GetTestValue().(*Value_B); ok {
		return x.B
	}
	return false
}

func (x *Value) GetO() *ObjectValue {
	if x, ok := x.GetTestValue().(*Value_O); ok {
		return x.O
	}
	return nil
}

func (x *Value) GetA() *ArrayValue {
	if x, ok := x.GetTestValue().(*Value_A); ok {
		return x.A
	}
	return nil
}

func (x *Value) GetAny() []byte {
	if x, ok := x.GetTestValue().(*Value_Any); ok {
		return x.Any
	}
	return nil
}

func (x *Value) GetVariable() string {
	if x, ok := x.GetTestValue().(*Value_Variable); ok {
		return x.Variable
	}
	return ""
}

func (x *Value) GetNil() bool {
	if x, ok := x.GetTestValue().(*Value_Nil); ok {
		return x.Nil
	}
	return false
}

type isValue_TestValue interface {
	isValue_TestValue()
}

type Value_I struct {
	I int64 `protobuf:"varint,1,opt,name=i,proto3,oneof"`
}

type Value_U struct {
	U uint64 `protobuf:"varint,2,opt,name=u,proto3,oneof"`
}

type Value_F struct {
	F float64 `protobuf:"fixed64,3,opt,name=f,proto3,oneof"`
}

type Value_S struct {
	S string `protobuf:"bytes,4,opt,name=s,proto3,oneof"`
}

type Value_B struct {
	B bool `protobuf:"varint,5,opt,name=b,proto3,oneof"`
}

type Value_O struct {
	O *ObjectValue `protobuf:"bytes,6,opt,name=o,proto3,oneof"`
}

type Value_A struct {
	A *ArrayValue `protobuf:"bytes,7,opt,name=a,proto3,oneof"`
}

type Value_Any struct {
	Any []byte `protobuf:"bytes,8,opt,name=any,proto3,oneof"`
}

type Value_Variable struct {
	Variable string `protobuf:"bytes,9,opt,name=variable,proto3,oneof"`
}

type Value_Nil struct {
	Nil bool `protobuf:"varint,10,opt,name=nil,proto3,oneof"`
}

func (*Value_I) isValue_TestValue() {}

func (*Value_U) isValue_TestValue() {}

func (*Value_F) isValue_TestValue() {}

func (*Value_S) isValue_TestValue() {}

func (*Value_B) isValue_TestValue() {}

func (*Value_O) isValue_TestValue() {}

func (*Value_A) isValue_TestValue() {}

func (*Value_Any) isValue_TestValue() {}

func (*Value_Variable) isValue_TestValue() {}

func (*Value_Nil) isValue_TestValue() {}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{3}
}

func (x *Error) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type Function struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Function) Reset() {
	*x = Function{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Function) ProtoMessage() {}

func (x *Function) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Function.ProtoReflect.Descriptor instead.
func (*Function) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{4}
}

func (x *Function) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TypeRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TestTyperef:
	//	*TypeRef_Name
	//	*TypeRef_NonNull
	//	*TypeRef_List
	TestTyperef isTypeRef_TestTyperef `protobuf_oneof:"test_typeref"`
}

func (x *TypeRef) Reset() {
	*x = TypeRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeRef) ProtoMessage() {}

func (x *TypeRef) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeRef.ProtoReflect.Descriptor instead.
func (*TypeRef) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{5}
}

func (m *TypeRef) GetTestTyperef() isTypeRef_TestTyperef {
	if m != nil {
		return m.TestTyperef
	}
	return nil
}

func (x *TypeRef) GetName() string {
	if x, ok := x.GetTestTyperef().(*TypeRef_Name); ok {
		return x.Name
	}
	return ""
}

func (x *TypeRef) GetNonNull() *TypeRef {
	if x, ok := x.GetTestTyperef().(*TypeRef_NonNull); ok {
		return x.NonNull
	}
	return nil
}

func (x *TypeRef) GetList() *TypeRef {
	if x, ok := x.GetTestTyperef().(*TypeRef_List); ok {
		return x.List
	}
	return nil
}

type isTypeRef_TestTyperef interface {
	isTypeRef_TestTyperef()
}

type TypeRef_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3,oneof"`
}

type TypeRef_NonNull struct {
	NonNull *TypeRef `protobuf:"bytes,2,opt,name=nonNull,proto3,oneof"`
}

type TypeRef_List struct {
	List *TypeRef `protobuf:"bytes,3,opt,name=list,proto3,oneof"`
}

func (*TypeRef_Name) isTypeRef_TestTyperef() {}

func (*TypeRef_NonNull) isTypeRef_TestTyperef() {}

func (*TypeRef_List) isTypeRef_TestTyperef() {}

type ResponsePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  *Value        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Prev *ResponsePath `protobuf:"bytes,2,opt,name=prev,proto3" json:"prev,omitempty"`
}

func (x *ResponsePath) Reset() {
	*x = ResponsePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePath) ProtoMessage() {}

func (x *ResponsePath) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePath.ProtoReflect.Descriptor instead.
func (*ResponsePath) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{6}
}

func (x *ResponsePath) GetKey() *Value {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ResponsePath) GetPrev() *ResponsePath {
	if x != nil {
		return x.Prev
	}
	return nil
}

type Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Variable) Reset() {
	*x = Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable) ProtoMessage() {}

func (x *Variable) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable.ProtoReflect.Descriptor instead.
func (*Variable) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{7}
}

func (x *Variable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type VariableDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Variable     *Variable `protobuf:"bytes,1,opt,name=variable,proto3" json:"variable,omitempty"`
	DefaultValue *Value    `protobuf:"bytes,2,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
}

func (x *VariableDefinition) Reset() {
	*x = VariableDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableDefinition) ProtoMessage() {}

func (x *VariableDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableDefinition.ProtoReflect.Descriptor instead.
func (*VariableDefinition) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{8}
}

func (x *VariableDefinition) GetVariable() *Variable {
	if x != nil {
		return x.Variable
	}
	return nil
}

func (x *VariableDefinition) GetDefaultValue() *Value {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

type Directive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Arguments map[string]*Value `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Directive) Reset() {
	*x = Directive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Directive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Directive) ProtoMessage() {}

func (x *Directive) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Directive.ProtoReflect.Descriptor instead.
func (*Directive) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{9}
}

func (x *Directive) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Directive) GetArguments() map[string]*Value {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type FragmentDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Directives          []*Directive          `protobuf:"bytes,1,rep,name=directives,proto3" json:"directives,omitempty"`
	TypeCondition       *TypeRef              `protobuf:"bytes,2,opt,name=typeCondition,proto3" json:"typeCondition,omitempty"`
	SelectionSet        []*Selection          `protobuf:"bytes,3,rep,name=selectionSet,proto3" json:"selectionSet,omitempty"`
	VariableDefinitions []*VariableDefinition `protobuf:"bytes,4,rep,name=variableDefinitions,proto3" json:"variableDefinitions,omitempty"`
}

func (x *FragmentDefinition) Reset() {
	*x = FragmentDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragmentDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentDefinition) ProtoMessage() {}

func (x *FragmentDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentDefinition.ProtoReflect.Descriptor instead.
func (*FragmentDefinition) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{10}
}

func (x *FragmentDefinition) GetDirectives() []*Directive {
	if x != nil {
		return x.Directives
	}
	return nil
}

func (x *FragmentDefinition) GetTypeCondition() *TypeRef {
	if x != nil {
		return x.TypeCondition
	}
	return nil
}

func (x *FragmentDefinition) GetSelectionSet() []*Selection {
	if x != nil {
		return x.SelectionSet
	}
	return nil
}

func (x *FragmentDefinition) GetVariableDefinitions() []*VariableDefinition {
	if x != nil {
		return x.VariableDefinitions
	}
	return nil
}

type Selection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Arguments    map[string]*Value   `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Directives   []*Directive        `protobuf:"bytes,3,rep,name=directives,proto3" json:"directives,omitempty"`
	SelectionSet []*Selection        `protobuf:"bytes,4,rep,name=selectionSet,proto3" json:"selectionSet,omitempty"`
	Definition   *FragmentDefinition `protobuf:"bytes,5,opt,name=definition,proto3" json:"definition,omitempty"`
}

func (x *Selection) Reset() {
	*x = Selection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selection) ProtoMessage() {}

func (x *Selection) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selection.ProtoReflect.Descriptor instead.
func (*Selection) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{11}
}

func (x *Selection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Selection) GetArguments() map[string]*Value {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *Selection) GetDirectives() []*Directive {
	if x != nil {
		return x.Directives
	}
	return nil
}

func (x *Selection) GetSelectionSet() []*Selection {
	if x != nil {
		return x.SelectionSet
	}
	return nil
}

func (x *Selection) GetDefinition() *FragmentDefinition {
	if x != nil {
		return x.Definition
	}
	return nil
}

type OperationDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation           string                `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	Name                string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	VariableDefinitions []*VariableDefinition `protobuf:"bytes,3,rep,name=variableDefinitions,proto3" json:"variableDefinitions,omitempty"`
	Directives          []*Directive          `protobuf:"bytes,4,rep,name=directives,proto3" json:"directives,omitempty"`
	SelectionSet        []*Selection          `protobuf:"bytes,5,rep,name=selectionSet,proto3" json:"selectionSet,omitempty"`
}

func (x *OperationDefinition) Reset() {
	*x = OperationDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDefinition) ProtoMessage() {}

func (x *OperationDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDefinition.ProtoReflect.Descriptor instead.
func (*OperationDefinition) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{12}
}

func (x *OperationDefinition) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *OperationDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OperationDefinition) GetVariableDefinitions() []*VariableDefinition {
	if x != nil {
		return x.VariableDefinitions
	}
	return nil
}

func (x *OperationDefinition) GetDirectives() []*Directive {
	if x != nil {
		return x.Directives
	}
	return nil
}

func (x *OperationDefinition) GetSelectionSet() []*Selection {
	if x != nil {
		return x.SelectionSet
	}
	return nil
}

type FieldResolveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName      string               `protobuf:"bytes,1,opt,name=fieldName,proto3" json:"fieldName,omitempty"`
	Path           *ResponsePath        `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	ReturnType     *TypeRef             `protobuf:"bytes,3,opt,name=returnType,proto3" json:"returnType,omitempty"`
	ParentType     *TypeRef             `protobuf:"bytes,4,opt,name=parentType,proto3" json:"parentType,omitempty"`
	Operation      *OperationDefinition `protobuf:"bytes,5,opt,name=operation,proto3" json:"operation,omitempty"`
	VariableValues map[string]*Value    `protobuf:"bytes,6,rep,name=variableValues,proto3" json:"variableValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RootValue      *Value               `protobuf:"bytes,7,opt,name=rootValue,proto3" json:"rootValue,omitempty"`
}

func (x *FieldResolveInfo) Reset() {
	*x = FieldResolveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldResolveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldResolveInfo) ProtoMessage() {}

func (x *FieldResolveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldResolveInfo.ProtoReflect.Descriptor instead.
func (*FieldResolveInfo) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{13}
}

func (x *FieldResolveInfo) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *FieldResolveInfo) GetPath() *ResponsePath {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *FieldResolveInfo) GetReturnType() *TypeRef {
	if x != nil {
		return x.ReturnType
	}
	return nil
}

func (x *FieldResolveInfo) GetParentType() *TypeRef {
	if x != nil {
		return x.ParentType
	}
	return nil
}

func (x *FieldResolveInfo) GetOperation() *OperationDefinition {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *FieldResolveInfo) GetVariableValues() map[string]*Value {
	if x != nil {
		return x.VariableValues
	}
	return nil
}

func (x *FieldResolveInfo) GetRootValue() *Value {
	if x != nil {
		return x.RootValue
	}
	return nil
}

type FieldResolveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function  *Function         `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	Source    *Value            `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Arguments map[string]*Value `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Info      *FieldResolveInfo `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	Secrets   map[string]string `protobuf:"bytes,5,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Protocol  *Value            `protobuf:"bytes,6,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (x *FieldResolveRequest) Reset() {
	*x = FieldResolveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldResolveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldResolveRequest) ProtoMessage() {}

func (x *FieldResolveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldResolveRequest.ProtoReflect.Descriptor instead.
func (*FieldResolveRequest) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{14}
}

func (x *FieldResolveRequest) GetFunction() *Function {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *FieldResolveRequest) GetSource() *Value {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *FieldResolveRequest) GetArguments() map[string]*Value {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *FieldResolveRequest) GetInfo() *FieldResolveInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *FieldResolveRequest) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *FieldResolveRequest) GetProtocol() *Value {
	if x != nil {
		return x.Protocol
	}
	return nil
}

type FieldResolveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Value `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Error    *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FieldResolveResponse) Reset() {
	*x = FieldResolveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldResolveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldResolveResponse) ProtoMessage() {}

func (x *FieldResolveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldResolveResponse.ProtoReflect.Descriptor instead.
func (*FieldResolveResponse) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{15}
}

func (x *FieldResolveResponse) GetResponse() *Value {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *FieldResolveResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type InterfaceResolveTypeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName      string               `protobuf:"bytes,1,opt,name=fieldName,proto3" json:"fieldName,omitempty"`
	Path           *ResponsePath        `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	ReturnType     *TypeRef             `protobuf:"bytes,3,opt,name=returnType,proto3" json:"returnType,omitempty"`
	ParentType     *TypeRef             `protobuf:"bytes,4,opt,name=parentType,proto3" json:"parentType,omitempty"`
	Operation      *OperationDefinition `protobuf:"bytes,5,opt,name=operation,proto3" json:"operation,omitempty"`
	VariableValues map[string]*Value    `protobuf:"bytes,6,rep,name=variableValues,proto3" json:"variableValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InterfaceResolveTypeInfo) Reset() {
	*x = InterfaceResolveTypeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceResolveTypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceResolveTypeInfo) ProtoMessage() {}

func (x *InterfaceResolveTypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceResolveTypeInfo.ProtoReflect.Descriptor instead.
func (*InterfaceResolveTypeInfo) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{16}
}

func (x *InterfaceResolveTypeInfo) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *InterfaceResolveTypeInfo) GetPath() *ResponsePath {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *InterfaceResolveTypeInfo) GetReturnType() *TypeRef {
	if x != nil {
		return x.ReturnType
	}
	return nil
}

func (x *InterfaceResolveTypeInfo) GetParentType() *TypeRef {
	if x != nil {
		return x.ParentType
	}
	return nil
}

func (x *InterfaceResolveTypeInfo) GetOperation() *OperationDefinition {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *InterfaceResolveTypeInfo) GetVariableValues() map[string]*Value {
	if x != nil {
		return x.VariableValues
	}
	return nil
}

type InterfaceResolveTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function *Function                 `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	Value    *Value                    `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Info     *InterfaceResolveTypeInfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *InterfaceResolveTypeRequest) Reset() {
	*x = InterfaceResolveTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceResolveTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceResolveTypeRequest) ProtoMessage() {}

func (x *InterfaceResolveTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceResolveTypeRequest.ProtoReflect.Descriptor instead.
func (*InterfaceResolveTypeRequest) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{17}
}

func (x *InterfaceResolveTypeRequest) GetFunction() *Function {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *InterfaceResolveTypeRequest) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InterfaceResolveTypeRequest) GetInfo() *InterfaceResolveTypeInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type InterfaceResolveTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *TypeRef `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Error *Error   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *InterfaceResolveTypeResponse) Reset() {
	*x = InterfaceResolveTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceResolveTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceResolveTypeResponse) ProtoMessage() {}

func (x *InterfaceResolveTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceResolveTypeResponse.ProtoReflect.Descriptor instead.
func (*InterfaceResolveTypeResponse) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{18}
}

func (x *InterfaceResolveTypeResponse) GetType() *TypeRef {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *InterfaceResolveTypeResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type ScalarParseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    *Value    `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Function *Function `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *ScalarParseRequest) Reset() {
	*x = ScalarParseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarParseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarParseRequest) ProtoMessage() {}

func (x *ScalarParseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarParseRequest.ProtoReflect.Descriptor instead.
func (*ScalarParseRequest) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{19}
}

func (x *ScalarParseRequest) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ScalarParseRequest) GetFunction() *Function {
	if x != nil {
		return x.Function
	}
	return nil
}

type ScalarParseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ScalarParseResponse) Reset() {
	*x = ScalarParseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarParseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarParseResponse) ProtoMessage() {}

func (x *ScalarParseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarParseResponse.ProtoReflect.Descriptor instead.
func (*ScalarParseResponse) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{20}
}

func (x *ScalarParseResponse) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ScalarParseResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type ScalarSerializeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    *Value    `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Function *Function `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *ScalarSerializeRequest) Reset() {
	*x = ScalarSerializeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarSerializeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarSerializeRequest) ProtoMessage() {}

func (x *ScalarSerializeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarSerializeRequest.ProtoReflect.Descriptor instead.
func (*ScalarSerializeRequest) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{21}
}

func (x *ScalarSerializeRequest) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ScalarSerializeRequest) GetFunction() *Function {
	if x != nil {
		return x.Function
	}
	return nil
}

type ScalarSerializeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ScalarSerializeResponse) Reset() {
	*x = ScalarSerializeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarSerializeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarSerializeResponse) ProtoMessage() {}

func (x *ScalarSerializeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarSerializeResponse.ProtoReflect.Descriptor instead.
func (*ScalarSerializeResponse) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{22}
}

func (x *ScalarSerializeResponse) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ScalarSerializeResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type UnionResolveTypeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName      string               `protobuf:"bytes,1,opt,name=fieldName,proto3" json:"fieldName,omitempty"`
	Path           *ResponsePath        `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	ReturnType     *TypeRef             `protobuf:"bytes,3,opt,name=returnType,proto3" json:"returnType,omitempty"`
	ParentType     *TypeRef             `protobuf:"bytes,4,opt,name=parentType,proto3" json:"parentType,omitempty"`
	Operation      *OperationDefinition `protobuf:"bytes,5,opt,name=operation,proto3" json:"operation,omitempty"`
	VariableValues map[string]*Value    `protobuf:"bytes,6,rep,name=variableValues,proto3" json:"variableValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UnionResolveTypeInfo) Reset() {
	*x = UnionResolveTypeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionResolveTypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionResolveTypeInfo) ProtoMessage() {}

func (x *UnionResolveTypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionResolveTypeInfo.ProtoReflect.Descriptor instead.
func (*UnionResolveTypeInfo) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{23}
}

func (x *UnionResolveTypeInfo) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *UnionResolveTypeInfo) GetPath() *ResponsePath {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *UnionResolveTypeInfo) GetReturnType() *TypeRef {
	if x != nil {
		return x.ReturnType
	}
	return nil
}

func (x *UnionResolveTypeInfo) GetParentType() *TypeRef {
	if x != nil {
		return x.ParentType
	}
	return nil
}

func (x *UnionResolveTypeInfo) GetOperation() *OperationDefinition {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *UnionResolveTypeInfo) GetVariableValues() map[string]*Value {
	if x != nil {
		return x.VariableValues
	}
	return nil
}

type UnionResolveTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function *Function             `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	Value    *Value                `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Info     *UnionResolveTypeInfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *UnionResolveTypeRequest) Reset() {
	*x = UnionResolveTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionResolveTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionResolveTypeRequest) ProtoMessage() {}

func (x *UnionResolveTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionResolveTypeRequest.ProtoReflect.Descriptor instead.
func (*UnionResolveTypeRequest) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{24}
}

func (x *UnionResolveTypeRequest) GetFunction() *Function {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *UnionResolveTypeRequest) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UnionResolveTypeRequest) GetInfo() *UnionResolveTypeInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UnionResolveTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *TypeRef `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Error *Error   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *UnionResolveTypeResponse) Reset() {
	*x = UnionResolveTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnionResolveTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionResolveTypeResponse) ProtoMessage() {}

func (x *UnionResolveTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionResolveTypeResponse.ProtoReflect.Descriptor instead.
func (*UnionResolveTypeResponse) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{25}
}

func (x *UnionResolveTypeResponse) GetType() *TypeRef {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *UnionResolveTypeResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type Secret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *Secret) Reset() {
	*x = Secret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret) ProtoMessage() {}

func (x *Secret) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret.ProtoReflect.Descriptor instead.
func (*Secret) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{26}
}

func (x *Secret) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Secret) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SetSecretsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secrets []*Secret `protobuf:"bytes,1,rep,name=secrets,proto3" json:"secrets,omitempty"`
}

func (x *SetSecretsRequest) Reset() {
	*x = SetSecretsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSecretsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSecretsRequest) ProtoMessage() {}

func (x *SetSecretsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSecretsRequest.ProtoReflect.Descriptor instead.
func (*SetSecretsRequest) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{27}
}

func (x *SetSecretsRequest) GetSecrets() []*Secret {
	if x != nil {
		return x.Secrets
	}
	return nil
}

type SetSecretsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SetSecretsResponse) Reset() {
	*x = SetSecretsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSecretsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSecretsResponse) ProtoMessage() {}

func (x *SetSecretsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSecretsResponse.ProtoReflect.Descriptor instead.
func (*SetSecretsResponse) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{28}
}

func (x *SetSecretsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type StreamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName      string               `protobuf:"bytes,1,opt,name=fieldName,proto3" json:"fieldName,omitempty"`
	Path           *ResponsePath        `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	ReturnType     *TypeRef             `protobuf:"bytes,3,opt,name=returnType,proto3" json:"returnType,omitempty"`
	ParentType     *TypeRef             `protobuf:"bytes,4,opt,name=parentType,proto3" json:"parentType,omitempty"`
	Operation      *OperationDefinition `protobuf:"bytes,5,opt,name=operation,proto3" json:"operation,omitempty"`
	VariableValues map[string]*Value    `protobuf:"bytes,6,rep,name=variableValues,proto3" json:"variableValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StreamInfo) Reset() {
	*x = StreamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInfo) ProtoMessage() {}

func (x *StreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInfo.ProtoReflect.Descriptor instead.
func (*StreamInfo) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{29}
}

func (x *StreamInfo) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *StreamInfo) GetPath() *ResponsePath {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *StreamInfo) GetReturnType() *TypeRef {
	if x != nil {
		return x.ReturnType
	}
	return nil
}

func (x *StreamInfo) GetParentType() *TypeRef {
	if x != nil {
		return x.ParentType
	}
	return nil
}

func (x *StreamInfo) GetOperation() *OperationDefinition {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *StreamInfo) GetVariableValues() map[string]*Value {
	if x != nil {
		return x.VariableValues
	}
	return nil
}

type StreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function  *Function         `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	Arguments map[string]*Value `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Info      *StreamInfo       `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Secrets   map[string]string `protobuf:"bytes,4,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Protocol  *Value            `protobuf:"bytes,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (x *StreamRequest) Reset() {
	*x = StreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRequest) ProtoMessage() {}

func (x *StreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRequest.ProtoReflect.Descriptor instead.
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{30}
}

func (x *StreamRequest) GetFunction() *Function {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *StreamRequest) GetArguments() map[string]*Value {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *StreamRequest) GetInfo() *StreamInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *StreamRequest) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *StreamRequest) GetProtocol() *Value {
	if x != nil {
		return x.Protocol
	}
	return nil
}

type StreamMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Value `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Error    *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *StreamMessage) Reset() {
	*x = StreamMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMessage) ProtoMessage() {}

func (x *StreamMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMessage.ProtoReflect.Descriptor instead.
func (*StreamMessage) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{31}
}

func (x *StreamMessage) GetResponse() *Value {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *StreamMessage) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type ByteStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ByteStreamRequest) Reset() {
	*x = ByteStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByteStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByteStreamRequest) ProtoMessage() {}

func (x *ByteStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByteStreamRequest.ProtoReflect.Descriptor instead.
func (*ByteStreamRequest) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{32}
}

type ByteStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ByteStream) Reset() {
	*x = ByteStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByteStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByteStream) ProtoMessage() {}

func (x *ByteStream) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByteStream.ProtoReflect.Descriptor instead.
func (*ByteStream) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{33}
}

func (x *ByteStream) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SubscriptionConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function       *Function         `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	Query          string            `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	VariableValues map[string]*Value `protobuf:"bytes,3,rep,name=variableValues,proto3" json:"variableValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OperationName  string            `protobuf:"bytes,4,opt,name=operationName,proto3" json:"operationName,omitempty"`
	Protocol       *Value            `protobuf:"bytes,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (x *SubscriptionConnectionRequest) Reset() {
	*x = SubscriptionConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionConnectionRequest) ProtoMessage() {}

func (x *SubscriptionConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionConnectionRequest.ProtoReflect.Descriptor instead.
func (*SubscriptionConnectionRequest) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{34}
}

func (x *SubscriptionConnectionRequest) GetFunction() *Function {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *SubscriptionConnectionRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SubscriptionConnectionRequest) GetVariableValues() map[string]*Value {
	if x != nil {
		return x.VariableValues
	}
	return nil
}

func (x *SubscriptionConnectionRequest) GetOperationName() string {
	if x != nil {
		return x.OperationName
	}
	return ""
}

func (x *SubscriptionConnectionRequest) GetProtocol() *Value {
	if x != nil {
		return x.Protocol
	}
	return nil
}

type SubscriptionConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *Value `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Error    *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SubscriptionConnectionResponse) Reset() {
	*x = SubscriptionConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionConnectionResponse) ProtoMessage() {}

func (x *SubscriptionConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionConnectionResponse.ProtoReflect.Descriptor instead.
func (*SubscriptionConnectionResponse) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{35}
}

func (x *SubscriptionConnectionResponse) GetResponse() *Value {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SubscriptionConnectionResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type SubscriptionListenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function       *Function            `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	Query          string               `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	VariableValues map[string]*Value    `protobuf:"bytes,3,rep,name=variableValues,proto3" json:"variableValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OperationName  string               `protobuf:"bytes,4,opt,name=operationName,proto3" json:"operationName,omitempty"`
	Protocol       *Value               `protobuf:"bytes,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Operation      *OperationDefinition `protobuf:"bytes,6,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *SubscriptionListenRequest) Reset() {
	*x = SubscriptionListenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionListenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionListenRequest) ProtoMessage() {}

func (x *SubscriptionListenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionListenRequest.ProtoReflect.Descriptor instead.
func (*SubscriptionListenRequest) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{36}
}

func (x *SubscriptionListenRequest) GetFunction() *Function {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *SubscriptionListenRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SubscriptionListenRequest) GetVariableValues() map[string]*Value {
	if x != nil {
		return x.VariableValues
	}
	return nil
}

func (x *SubscriptionListenRequest) GetOperationName() string {
	if x != nil {
		return x.OperationName
	}
	return ""
}

func (x *SubscriptionListenRequest) GetProtocol() *Value {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *SubscriptionListenRequest) GetOperation() *OperationDefinition {
	if x != nil {
		return x.Operation
	}
	return nil
}

type SubscriptionListenMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next    bool   `protobuf:"varint,1,opt,name=next,proto3" json:"next,omitempty"`
	Payload *Value `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *SubscriptionListenMessage) Reset() {
	*x = SubscriptionListenMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_messages_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionListenMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionListenMessage) ProtoMessage() {}

func (x *SubscriptionListenMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_messages_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionListenMessage.ProtoReflect.Descriptor instead.
func (*SubscriptionListenMessage) Descriptor() ([]byte, []int) {
	return file_messages_messages_proto_rawDescGZIP(), []int{37}
}

func (x *SubscriptionListenMessage) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *SubscriptionListenMessage) GetPayload() *Value {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_messages_messages_proto protoreflect.FileDescriptor

var file_messages_messages_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x73, 0x74, 0x75, 0x63, 0x63,
	0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x0b, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x75, 0x63,
	0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x1a, 0x50, 0x0a, 0x0a, 0x50, 0x72, 0x6f,
	0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63,
	0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x0a, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63,
	0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x86, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x0e, 0x0a, 0x01, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x01,
	0x69, 0x12, 0x0e, 0x0a, 0x01, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x01,
	0x75, 0x12, 0x0e, 0x0a, 0x01, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x01,
	0x66, 0x12, 0x0e, 0x0a, 0x01, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x01,
	0x73, 0x12, 0x0e, 0x0a, 0x01, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x01,
	0x62, 0x12, 0x2c, 0x0a, 0x01, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x01, 0x6f, 0x12,
	0x2b, 0x0a, 0x01, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x75,
	0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x01, 0x61, 0x12, 0x12, 0x0a, 0x03,
	0x61, 0x6e, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6e, 0x79,
	0x12, 0x1c, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x03, 0x6e, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x6e,
	0x69, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x19, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x1e, 0x0a, 0x08, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x07,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x07, 0x6e, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x6f, 0x6e, 0x4e,
	0x75, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x72, 0x65, 0x66, 0x22, 0x6b, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a,
	0x04, 0x70, 0x72, 0x65, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74,
	0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x72, 0x65, 0x76,
	0x22, 0x1e, 0x0a, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x87, 0x01, 0x0a, 0x12, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x75, 0x63,
	0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3a,
	0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x09, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x54, 0x0a, 0x0e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63,
	0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x02, 0x0a, 0x12,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x3e,
	0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x52,
	0x0d, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e,
	0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x55,
	0x0a, 0x13, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74,
	0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xff, 0x02, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x75,
	0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x0a,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x54, 0x0a, 0x0e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9a, 0x02, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x55, 0x0a, 0x13, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x13, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x75,
	0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x22, 0x8b, 0x04, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63,
	0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x66, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x74, 0x75,
	0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x6f,
	0x6f, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x59, 0x0a, 0x13, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x99, 0x04, 0x0a, 0x13, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73,
	0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x51, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x07, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73,
	0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75,
	0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x54, 0x0a, 0x0e,
	0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x78,
	0x0a, 0x14, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63,
	0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63,
	0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xe5, 0x03, 0x0a, 0x18, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x75,
	0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x66, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65,
	0x0a, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x59, 0x0a, 0x13, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xc1, 0x01, 0x0a, 0x1b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0x7a, 0x0a, 0x1c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x79, 0x0a, 0x12, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x0a, 0x13, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x7d,
	0x0a, 0x16, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63,
	0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a,
	0x17, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xdd, 0x03, 0x0a, 0x14, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x75, 0x63,
	0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x38,
	0x0a, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x52, 0x0a, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x59, 0x0a, 0x13, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x01, 0x0a, 0x17, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0x76, 0x0a, 0x18, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x75,
	0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x66, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63,
	0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x30, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x46, 0x0a, 0x11, 0x53, 0x65,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x22, 0x42, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xc9, 0x03, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x75,
	0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x66, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57,
	0x0a, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x59, 0x0a, 0x13, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xd1, 0x03, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x09, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x07, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x75,
	0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x12, 0x32, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x54, 0x0a, 0x0e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x71, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63,
	0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75,
	0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x13, 0x0a, 0x11, 0x42, 0x79, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x20,
	0x0a, 0x0a, 0x42, 0x79, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x8d, 0x03, 0x0a, 0x1d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x6a, 0x0a, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x59, 0x0a, 0x13, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x82, 0x01, 0x0a, 0x1e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xc9, 0x03, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x66, 0x0a, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63,
	0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x42, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x59, 0x0a, 0x13, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x61, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65,
	0x78, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x2d, 0x65, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2f, 0x73, 0x74, 0x75, 0x63, 0x63, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_messages_messages_proto_rawDescOnce sync.Once
	file_messages_messages_proto_rawDescData = file_messages_messages_proto_rawDesc
)

func file_messages_messages_proto_rawDescGZIP() []byte {
	file_messages_messages_proto_rawDescOnce.Do(func() {
		file_messages_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_messages_messages_proto_rawDescData)
	})
	return file_messages_messages_proto_rawDescData
}

var file_messages_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_messages_messages_proto_goTypes = []interface{}{
	(*ObjectValue)(nil),                    // 0: stucco.messages.ObjectValue
	(*ArrayValue)(nil),                     // 1: stucco.messages.ArrayValue
	(*Value)(nil),                          // 2: stucco.messages.Value
	(*Error)(nil),                          // 3: stucco.messages.Error
	(*Function)(nil),                       // 4: stucco.messages.Function
	(*TypeRef)(nil),                        // 5: stucco.messages.TypeRef
	(*ResponsePath)(nil),                   // 6: stucco.messages.ResponsePath
	(*Variable)(nil),                       // 7: stucco.messages.Variable
	(*VariableDefinition)(nil),             // 8: stucco.messages.VariableDefinition
	(*Directive)(nil),                      // 9: stucco.messages.Directive
	(*FragmentDefinition)(nil),             // 10: stucco.messages.FragmentDefinition
	(*Selection)(nil),                      // 11: stucco.messages.Selection
	(*OperationDefinition)(nil),            // 12: stucco.messages.OperationDefinition
	(*FieldResolveInfo)(nil),               // 13: stucco.messages.FieldResolveInfo
	(*FieldResolveRequest)(nil),            // 14: stucco.messages.FieldResolveRequest
	(*FieldResolveResponse)(nil),           // 15: stucco.messages.FieldResolveResponse
	(*InterfaceResolveTypeInfo)(nil),       // 16: stucco.messages.InterfaceResolveTypeInfo
	(*InterfaceResolveTypeRequest)(nil),    // 17: stucco.messages.InterfaceResolveTypeRequest
	(*InterfaceResolveTypeResponse)(nil),   // 18: stucco.messages.InterfaceResolveTypeResponse
	(*ScalarParseRequest)(nil),             // 19: stucco.messages.ScalarParseRequest
	(*ScalarParseResponse)(nil),            // 20: stucco.messages.ScalarParseResponse
	(*ScalarSerializeRequest)(nil),         // 21: stucco.messages.ScalarSerializeRequest
	(*ScalarSerializeResponse)(nil),        // 22: stucco.messages.ScalarSerializeResponse
	(*UnionResolveTypeInfo)(nil),           // 23: stucco.messages.UnionResolveTypeInfo
	(*UnionResolveTypeRequest)(nil),        // 24: stucco.messages.UnionResolveTypeRequest
	(*UnionResolveTypeResponse)(nil),       // 25: stucco.messages.UnionResolveTypeResponse
	(*Secret)(nil),                         // 26: stucco.messages.Secret
	(*SetSecretsRequest)(nil),              // 27: stucco.messages.SetSecretsRequest
	(*SetSecretsResponse)(nil),             // 28: stucco.messages.SetSecretsResponse
	(*StreamInfo)(nil),                     // 29: stucco.messages.StreamInfo
	(*StreamRequest)(nil),                  // 30: stucco.messages.StreamRequest
	(*StreamMessage)(nil),                  // 31: stucco.messages.StreamMessage
	(*ByteStreamRequest)(nil),              // 32: stucco.messages.ByteStreamRequest
	(*ByteStream)(nil),                     // 33: stucco.messages.ByteStream
	(*SubscriptionConnectionRequest)(nil),  // 34: stucco.messages.SubscriptionConnectionRequest
	(*SubscriptionConnectionResponse)(nil), // 35: stucco.messages.SubscriptionConnectionResponse
	(*SubscriptionListenRequest)(nil),      // 36: stucco.messages.SubscriptionListenRequest
	(*SubscriptionListenMessage)(nil),      // 37: stucco.messages.SubscriptionListenMessage
	nil,                                    // 38: stucco.messages.ObjectValue.PropsEntry
	nil,                                    // 39: stucco.messages.Directive.ArgumentsEntry
	nil,                                    // 40: stucco.messages.Selection.ArgumentsEntry
	nil,                                    // 41: stucco.messages.FieldResolveInfo.VariableValuesEntry
	nil,                                    // 42: stucco.messages.FieldResolveRequest.ArgumentsEntry
	nil,                                    // 43: stucco.messages.FieldResolveRequest.SecretsEntry
	nil,                                    // 44: stucco.messages.InterfaceResolveTypeInfo.VariableValuesEntry
	nil,                                    // 45: stucco.messages.UnionResolveTypeInfo.VariableValuesEntry
	nil,                                    // 46: stucco.messages.StreamInfo.VariableValuesEntry
	nil,                                    // 47: stucco.messages.StreamRequest.ArgumentsEntry
	nil,                                    // 48: stucco.messages.StreamRequest.SecretsEntry
	nil,                                    // 49: stucco.messages.SubscriptionConnectionRequest.VariableValuesEntry
	nil,                                    // 50: stucco.messages.SubscriptionListenRequest.VariableValuesEntry
}
var file_messages_messages_proto_depIdxs = []int32{
	38, // 0: stucco.messages.ObjectValue.props:type_name -> stucco.messages.ObjectValue.PropsEntry
	2,  // 1: stucco.messages.ArrayValue.items:type_name -> stucco.messages.Value
	0,  // 2: stucco.messages.Value.o:type_name -> stucco.messages.ObjectValue
	1,  // 3: stucco.messages.Value.a:type_name -> stucco.messages.ArrayValue
	5,  // 4: stucco.messages.TypeRef.nonNull:type_name -> stucco.messages.TypeRef
	5,  // 5: stucco.messages.TypeRef.list:type_name -> stucco.messages.TypeRef
	2,  // 6: stucco.messages.ResponsePath.key:type_name -> stucco.messages.Value
	6,  // 7: stucco.messages.ResponsePath.prev:type_name -> stucco.messages.ResponsePath
	7,  // 8: stucco.messages.VariableDefinition.variable:type_name -> stucco.messages.Variable
	2,  // 9: stucco.messages.VariableDefinition.defaultValue:type_name -> stucco.messages.Value
	39, // 10: stucco.messages.Directive.arguments:type_name -> stucco.messages.Directive.ArgumentsEntry
	9,  // 11: stucco.messages.FragmentDefinition.directives:type_name -> stucco.messages.Directive
	5,  // 12: stucco.messages.FragmentDefinition.typeCondition:type_name -> stucco.messages.TypeRef
	11, // 13: stucco.messages.FragmentDefinition.selectionSet:type_name -> stucco.messages.Selection
	8,  // 14: stucco.messages.FragmentDefinition.variableDefinitions:type_name -> stucco.messages.VariableDefinition
	40, // 15: stucco.messages.Selection.arguments:type_name -> stucco.messages.Selection.ArgumentsEntry
	9,  // 16: stucco.messages.Selection.directives:type_name -> stucco.messages.Directive
	11, // 17: stucco.messages.Selection.selectionSet:type_name -> stucco.messages.Selection
	10, // 18: stucco.messages.Selection.definition:type_name -> stucco.messages.FragmentDefinition
	8,  // 19: stucco.messages.OperationDefinition.variableDefinitions:type_name -> stucco.messages.VariableDefinition
	9,  // 20: stucco.messages.OperationDefinition.directives:type_name -> stucco.messages.Directive
	11, // 21: stucco.messages.OperationDefinition.selectionSet:type_name -> stucco.messages.Selection
	6,  // 22: stucco.messages.FieldResolveInfo.path:type_name -> stucco.messages.ResponsePath
	5,  // 23: stucco.messages.FieldResolveInfo.returnType:type_name -> stucco.messages.TypeRef
	5,  // 24: stucco.messages.FieldResolveInfo.parentType:type_name -> stucco.messages.TypeRef
	12, // 25: stucco.messages.FieldResolveInfo.operation:type_name -> stucco.messages.OperationDefinition
	41, // 26: stucco.messages.FieldResolveInfo.variableValues:type_name -> stucco.messages.FieldResolveInfo.VariableValuesEntry
	2,  // 27: stucco.messages.FieldResolveInfo.rootValue:type_name -> stucco.messages.Value
	4,  // 28: stucco.messages.FieldResolveRequest.function:type_name -> stucco.messages.Function
	2,  // 29: stucco.messages.FieldResolveRequest.source:type_name -> stucco.messages.Value
	42, // 30: stucco.messages.FieldResolveRequest.arguments:type_name -> stucco.messages.FieldResolveRequest.ArgumentsEntry
	13, // 31: stucco.messages.FieldResolveRequest.info:type_name -> stucco.messages.FieldResolveInfo
	43, // 32: stucco.messages.FieldResolveRequest.secrets:type_name -> stucco.messages.FieldResolveRequest.SecretsEntry
	2,  // 33: stucco.messages.FieldResolveRequest.protocol:type_name -> stucco.messages.Value
	2,  // 34: stucco.messages.FieldResolveResponse.response:type_name -> stucco.messages.Value
	3,  // 35: stucco.messages.FieldResolveResponse.error:type_name -> stucco.messages.Error
	6,  // 36: stucco.messages.InterfaceResolveTypeInfo.path:type_name -> stucco.messages.ResponsePath
	5,  // 37: stucco.messages.InterfaceResolveTypeInfo.returnType:type_name -> stucco.messages.TypeRef
	5,  // 38: stucco.messages.InterfaceResolveTypeInfo.parentType:type_name -> stucco.messages.TypeRef
	12, // 39: stucco.messages.InterfaceResolveTypeInfo.operation:type_name -> stucco.messages.OperationDefinition
	44, // 40: stucco.messages.InterfaceResolveTypeInfo.variableValues:type_name -> stucco.messages.InterfaceResolveTypeInfo.VariableValuesEntry
	4,  // 41: stucco.messages.InterfaceResolveTypeRequest.function:type_name -> stucco.messages.Function
	2,  // 42: stucco.messages.InterfaceResolveTypeRequest.value:type_name -> stucco.messages.Value
	16, // 43: stucco.messages.InterfaceResolveTypeRequest.info:type_name -> stucco.messages.InterfaceResolveTypeInfo
	5,  // 44: stucco.messages.InterfaceResolveTypeResponse.type:type_name -> stucco.messages.TypeRef
	3,  // 45: stucco.messages.InterfaceResolveTypeResponse.error:type_name -> stucco.messages.Error
	2,  // 46: stucco.messages.ScalarParseRequest.value:type_name -> stucco.messages.Value
	4,  // 47: stucco.messages.ScalarParseRequest.function:type_name -> stucco.messages.Function
	2,  // 48: stucco.messages.ScalarParseResponse.value:type_name -> stucco.messages.Value
	3,  // 49: stucco.messages.ScalarParseResponse.error:type_name -> stucco.messages.Error
	2,  // 50: stucco.messages.ScalarSerializeRequest.value:type_name -> stucco.messages.Value
	4,  // 51: stucco.messages.ScalarSerializeRequest.function:type_name -> stucco.messages.Function
	2,  // 52: stucco.messages.ScalarSerializeResponse.value:type_name -> stucco.messages.Value
	3,  // 53: stucco.messages.ScalarSerializeResponse.error:type_name -> stucco.messages.Error
	6,  // 54: stucco.messages.UnionResolveTypeInfo.path:type_name -> stucco.messages.ResponsePath
	5,  // 55: stucco.messages.UnionResolveTypeInfo.returnType:type_name -> stucco.messages.TypeRef
	5,  // 56: stucco.messages.UnionResolveTypeInfo.parentType:type_name -> stucco.messages.TypeRef
	12, // 57: stucco.messages.UnionResolveTypeInfo.operation:type_name -> stucco.messages.OperationDefinition
	45, // 58: stucco.messages.UnionResolveTypeInfo.variableValues:type_name -> stucco.messages.UnionResolveTypeInfo.VariableValuesEntry
	4,  // 59: stucco.messages.UnionResolveTypeRequest.function:type_name -> stucco.messages.Function
	2,  // 60: stucco.messages.UnionResolveTypeRequest.value:type_name -> stucco.messages.Value
	23, // 61: stucco.messages.UnionResolveTypeRequest.info:type_name -> stucco.messages.UnionResolveTypeInfo
	5,  // 62: stucco.messages.UnionResolveTypeResponse.type:type_name -> stucco.messages.TypeRef
	3,  // 63: stucco.messages.UnionResolveTypeResponse.error:type_name -> stucco.messages.Error
	26, // 64: stucco.messages.SetSecretsRequest.secrets:type_name -> stucco.messages.Secret
	3,  // 65: stucco.messages.SetSecretsResponse.error:type_name -> stucco.messages.Error
	6,  // 66: stucco.messages.StreamInfo.path:type_name -> stucco.messages.ResponsePath
	5,  // 67: stucco.messages.StreamInfo.returnType:type_name -> stucco.messages.TypeRef
	5,  // 68: stucco.messages.StreamInfo.parentType:type_name -> stucco.messages.TypeRef
	12, // 69: stucco.messages.StreamInfo.operation:type_name -> stucco.messages.OperationDefinition
	46, // 70: stucco.messages.StreamInfo.variableValues:type_name -> stucco.messages.StreamInfo.VariableValuesEntry
	4,  // 71: stucco.messages.StreamRequest.function:type_name -> stucco.messages.Function
	47, // 72: stucco.messages.StreamRequest.arguments:type_name -> stucco.messages.StreamRequest.ArgumentsEntry
	29, // 73: stucco.messages.StreamRequest.info:type_name -> stucco.messages.StreamInfo
	48, // 74: stucco.messages.StreamRequest.secrets:type_name -> stucco.messages.StreamRequest.SecretsEntry
	2,  // 75: stucco.messages.StreamRequest.protocol:type_name -> stucco.messages.Value
	2,  // 76: stucco.messages.StreamMessage.response:type_name -> stucco.messages.Value
	3,  // 77: stucco.messages.StreamMessage.error:type_name -> stucco.messages.Error
	4,  // 78: stucco.messages.SubscriptionConnectionRequest.function:type_name -> stucco.messages.Function
	49, // 79: stucco.messages.SubscriptionConnectionRequest.variableValues:type_name -> stucco.messages.SubscriptionConnectionRequest.VariableValuesEntry
	2,  // 80: stucco.messages.SubscriptionConnectionRequest.protocol:type_name -> stucco.messages.Value
	2,  // 81: stucco.messages.SubscriptionConnectionResponse.response:type_name -> stucco.messages.Value
	3,  // 82: stucco.messages.SubscriptionConnectionResponse.error:type_name -> stucco.messages.Error
	4,  // 83: stucco.messages.SubscriptionListenRequest.function:type_name -> stucco.messages.Function
	50, // 84: stucco.messages.SubscriptionListenRequest.variableValues:type_name -> stucco.messages.SubscriptionListenRequest.VariableValuesEntry
	2,  // 85: stucco.messages.SubscriptionListenRequest.protocol:type_name -> stucco.messages.Value
	12, // 86: stucco.messages.SubscriptionListenRequest.operation:type_name -> stucco.messages.OperationDefinition
	2,  // 87: stucco.messages.SubscriptionListenMessage.payload:type_name -> stucco.messages.Value
	2,  // 88: stucco.messages.ObjectValue.PropsEntry.value:type_name -> stucco.messages.Value
	2,  // 89: stucco.messages.Directive.ArgumentsEntry.value:type_name -> stucco.messages.Value
	2,  // 90: stucco.messages.Selection.ArgumentsEntry.value:type_name -> stucco.messages.Value
	2,  // 91: stucco.messages.FieldResolveInfo.VariableValuesEntry.value:type_name -> stucco.messages.Value
	2,  // 92: stucco.messages.FieldResolveRequest.ArgumentsEntry.value:type_name -> stucco.messages.Value
	2,  // 93: stucco.messages.InterfaceResolveTypeInfo.VariableValuesEntry.value:type_name -> stucco.messages.Value
	2,  // 94: stucco.messages.UnionResolveTypeInfo.VariableValuesEntry.value:type_name -> stucco.messages.Value
	2,  // 95: stucco.messages.StreamInfo.VariableValuesEntry.value:type_name -> stucco.messages.Value
	2,  // 96: stucco.messages.StreamRequest.ArgumentsEntry.value:type_name -> stucco.messages.Value
	2,  // 97: stucco.messages.SubscriptionConnectionRequest.VariableValuesEntry.value:type_name -> stucco.messages.Value
	2,  // 98: stucco.messages.SubscriptionListenRequest.VariableValuesEntry.value:type_name -> stucco.messages.Value
	99, // [99:99] is the sub-list for method output_type
	99, // [99:99] is the sub-list for method input_type
	99, // [99:99] is the sub-list for extension type_name
	99, // [99:99] is the sub-list for extension extendee
	0,  // [0:99] is the sub-list for field type_name
}

func init() { file_messages_messages_proto_init() }
func file_messages_messages_proto_init() {
	if File_messages_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_messages_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrayValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Function); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Directive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragmentDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Selection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldResolveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldResolveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldResolveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceResolveTypeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceResolveTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceResolveTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarParseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarParseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarSerializeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarSerializeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnionResolveTypeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnionResolveTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnionResolveTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSecretsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSecretsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByteStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByteStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionListenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_messages_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionListenMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_messages_messages_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Value_I)(nil),
		(*Value_U)(nil),
		(*Value_F)(nil),
		(*Value_S)(nil),
		(*Value_B)(nil),
		(*Value_O)(nil),
		(*Value_A)(nil),
		(*Value_Any)(nil),
		(*Value_Variable)(nil),
		(*Value_Nil)(nil),
	}
	file_messages_messages_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*TypeRef_Name)(nil),
		(*TypeRef_NonNull)(nil),
		(*TypeRef_List)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messages_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_messages_proto_goTypes,
		DependencyIndexes: file_messages_messages_proto_depIdxs,
		MessageInfos:      file_messages_messages_proto_msgTypes,
	}.Build()
	File_messages_messages_proto = out.File
	file_messages_messages_proto_rawDesc = nil
	file_messages_messages_proto_goTypes = nil
	file_messages_messages_proto_depIdxs = nil
}
